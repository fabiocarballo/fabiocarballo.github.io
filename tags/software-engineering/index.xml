<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering on Fábio Carballo</title><link>https://fabiocarballo.github.io/tags/software-engineering/</link><description>Recent content in Software Engineering on Fábio Carballo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© {year}</copyright><lastBuildDate>Wed, 27 Oct 2021 13:18:20 +0200</lastBuildDate><atom:link href="https://fabiocarballo.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>The dangers of Hyrum's Law in Domain Modelling</title><link>https://fabiocarballo.github.io/blog/the_dangers_of_hyrum_law_in_domain_modelling/</link><pubDate>Wed, 27 Oct 2021 13:18:20 +0200</pubDate><guid>https://fabiocarballo.github.io/blog/the_dangers_of_hyrum_law_in_domain_modelling/</guid><description>Recently, I have gotten to know about Hyrum&amp;rsquo;s Law, when reading Software Engineering at Google. This is an informal law that was raised in the early days of Google and states the following:
With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be dependend on by somebody
This law has quite several implications in different areas of software engineering, such as testing, deprecation, and domain modelling - and it directly impacts the code &amp;ldquo;maintainability&amp;rdquo; - since it indicates that the documented and tested behaviors may be a subset of all the expected behaviors.</description></item></channel></rss>